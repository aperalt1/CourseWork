int sequential_search(int array[], int length, int key)
{
	for(int i = 0; i < length; i++)
	{
		if(array[i] == key) 
		{
			return i;
		}
	}
	return -1;
}

Sequential Search:
	Assume
	1. probability of a successful search is equal to p(0 <= p <= 1)
	2. probability of the first match occuring in the ith position is the same for every i

With a successful search, the probability of the first match occuring in the ith position is p/n  for every i (n is length of the array)
Number of comparisons made: i

With an unsuccessful search, the number of comparisons will be n, with the probabilty of such a search being 1 - p

Cavg(n) = [(1 * (p / n)) + (2 * (p / n)) + . . . + (i * (p / n)) + . . . (n * (p / n))] + n * (1 - p)
	= (p / n) * [1 + 2 + . . . + i + . . . + n] + n(1 - p)
	= (p(n + 1)/2) + n(1 - p)


S = 1 + 2 + 3 + . . . + (n - 1) + n
  = n + (n - 1) + (n - 2) + . . . + 2 + 1
2S = n(n + 1)
S = n(n + 1) / 2

if p = 1 => search is successful, number of probes is (n + 1) / 2


Amortized Efficiency:
- Does not apply to a single run of the algorithm 
- Applies to a suequece of operations performed on the same data structure
- Discovered by Robert Tarjan

O(g(n)) = { f(n) where there exists positive constants c and n_0 such that ) <= f(n) <= c * g(n) for all n >= n_0

Omega(g(n)) = { f(n) where there exists positive constants c and n_0 such that 0 <= c * g(n) <= f(n) for all n >= n_0

Theta(g(n)) = { f(n) where there exists positive constants c1, c2, and n_0 such that 0 <= c1 * g(n) <= f(n) <= c2 g(n) for all n >= n_0


Selection Sort:
Always makes n(n-1) / 2 comparisons
Always makes at most n - 1 swaps

for(int i = 0; i < arr.len; i++)
	for(int j = i + 1; j < arr.len; j++)
		if(arr[i] < arr[j])
			swap(i,j);
			

function bubblesort(int[] list)
while n > 0
{
	newN  = 0
	for i : 1 to n-1 do
		if list[i-1] > list[i]
			swap(i-1,i)
			newN = 1
	n = newN
}


A set of points (finite or infinite) in the plane is called convex if for any two points p and q in the set, the entire line segment with endpoints p and q belongs to the set.
The convex hull of a set S is the smallest convex set containing S.

adjacency matrix

Non-Directed Graph:

		1	2	3	4	5

	     1  	1
	     
	     2  1			1

	     3				1	1

	     4		1	1		1

	     5			1	1	



Directed Graph

		1	2	3	4	5

	     1

	     2  1			1

	     3  				1

	     4			1		1

	     5


adjacency list
Array of linked lists

"From" Vertices			"To" Vertices
			1

			2---->[1]---->[4]---->[]

			3---->[5]---->[]

			4---->[3]---->[5]---->[]

			5

Topological Sort: 3	5	7	8	10	11	2	9

Nodes: 		2	3	4	5	7	8	9	10

indegree:	1	0	0	0	2	2	1	2           (Number of nodes feeding into them)

Start at indegree of 0, every time you use a node, decrease the indegree of the nodes that are being fed by that node

Depth First Search (DFS)

Node	1	5	7	12	19	47	68	101
Marked	0	0	0	0	0	0	0	0
	1	2	4	3	5	7	6	8

count = 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8


Bredth First Search (BFS)

Node	1	5	7	12	19	47	68	101
Marked	0	0	0	0	0	0	0	0
	1	2	5	3	4	7	6	8

queue = [1] -> [1,5] -> [1,5,12] -> [x,5,12] -> [x,5,12,19] -> [x,x,12,19] -> [x,x,12,19,7,68] -> [x,x,x,x,x,x] -> [x,x,x,x,x,x,47] -> [x,x,x,x,x,x,47,101] -> [x,x,x,x,x,x,x,x]

count = 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8


Topological Sort

int sum(int a, int b)
{
	return a + b;
}

int main()
{
	int *array = new int[5];
	array[0] = 2;
	cout << array[0] << endl;
	return 0;
}

vector<vertex_id> top_sort(const Graph = consta graph)
{
	vector<vertex_id> order, vertices = graph->get_vertices();
	size_t num_vertices = static_cast<size_t>(graph->get_highest_vertex_id());
	order_reserve(num_vertices);
	int *in_degrees = num int[num_vertices + 1];
	fill(in_degrees, in_degrees + num_vertices + 1, -1);

	for(vector<vertex_id>::iterator it = vertices.begin(); it != vertices.end(); ++it)
	{
		in_degrees[*it] = 0;
	}

	priority_queue< vertex_id, vector<vertex_id>, greater<vertex_id > zero_indegree_nodes;

	for(size_t i = 1; i <= num_vertices; ++i)
		vector<vertex_id> adjacent = graph->get_adjacent(i);
		for(vector<vertex_id>::iterator it = adjacent.begin(); it != adjacent.end(); ++it)
		{
			++in_degrees[it];
		}

	for(size_t i = 1; i< num_vertices; ++i)
	{
		if(in_degrees[i] == 0)
			zero_indegree_nodes.push(i);
	}

	while(!zero_indegree_nodes.empty())
	{
		vertex_id n = zero_indegree_nodes.top();
		zero_indegree_nodes_pop();
		order.push_back(n);
		vector<vertex_id> adjacent = graph->get_adjacent(n);
		for(vector<vertex_id>::iterator it = adjacent.begin(); it != adjacent.end(); ++it)
		{
			--in_degrees[*it];
			if(in_degrees[*it] == 0)
				zero_indegree_nodes.push(*it);
		}
	}

	for(size_t i = 1; i <= num_vertices; ++i)
	{
		if(in_degrees[i] > 0
		{
			order.clear();
			break;
		}
	}

	delete [] in_degrees;
	return order;
}

11/13/15

Horner's Rule for evaluating a polynomial

Horner(P[0 . . . n], x)
//Evaluates a polynomial at a given point by Horner's rule
//Input: An array P[0 . . . n] of coefficients of polynomials of degree n, stored from the lowest 
//to the highest, and a number x.
//Output: The value of the polynomial at x.

p <- P[n]
for i <- n - 1 downto 0 do
	p <- x * p + P[i]
return p
