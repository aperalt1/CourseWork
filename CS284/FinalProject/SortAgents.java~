import java.io.IOException;

public class SortAgents 
{
	public static MyPriorityQueue passQueue;

	private static void swap(Object[] arr, int x, int y) 
	{
        	if (x != y) 
		{
            		Object temp = arr[x];
            		arr[x] = arr[y];
            		arr[y] = temp;
		}
        }

    	private static void insert(TSA[] arr, int n, int s, int incr) 
	{
        	int i, j;
                for (i = s + incr; i < n; i += incr) 
            		for (j = i; (j > s) && (arr[j].compareTo(arr[j-incr]) > 0); j -= incr)
                		swap(arr, j, j-incr);
        }
	
        /*
                @param arr: Array of TSA to sort with ShellSort
                @param n: Number of items in arr to sort
        */
    	public static void shell(TSA[] arr, int n) 
	{
        	int s, incr;
        	if(arr != null && n > 1)
                {
                        if(n > arr.length)
                                n = arr.length;

        		for (incr = n/2; incr < n; incr++) 
			{
            			for (s = 0; s < incr; s++)
                			insert(arr, n, s, incr);
        		}
        		insert(arr, n, 0, 1);
		}
    	}

	public static TSA[] sort() throws IOException 
	{
		TSA[] agentsArr = ReadFile.buildAgents();
		shell(agentsArr, agentsArr.length);
		return agentsArr;
	}
	
	public static MyPriorityQueue buildQueue() throws IOException
	{
		Passenger[] passArr = ReadFile.buildPass();
		passQueue = new MyPriorityQueue(passArr, passArr.length);
		return passQueue;
	}
	

		
	public static void main(String[] args) throws IOException
	{
		TSA[] sortedArr = sort();
		for(int i = 0; i < sortedArr.length; i++)
			System.out.println(sortedArr[i]);
		MyPriorityQueue passenQueue = buildQueue();
		passenQueue.parse();
	}

}
